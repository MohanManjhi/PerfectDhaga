<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Select Fabrics</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css">
    <style>
        /* Static Add to Cart button */
        .sticky-cart {
            position: fixed;
            bottom: 0;
            left: 0;
            width: 100%;
            background-color: white;
            padding: 0.5rem 1rem;
            border-top: 1px solid #e5e7eb;
            z-index: 10;
            display: flex;
            justify-content: center;
        }

        .sticky-cart .cart-button {
            background-color: #38a169;
            color: white;
            font-size: 1rem;
            font-weight: bold;
            padding: 0.75rem 1.5rem;
            border-radius: 5px;
            box-shadow: 0px 2px 6px rgba(0, 0, 0, 0.2);
        }

        .sticky-cart .cart-button:hover {
            background-color: #2f855a;
        }

        /* Card size and styling */
        .fabric-card {
            max-width: 200px;
            padding: 1rem;
            border-radius: 0.75rem;
            box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
        }

        .fabric-card img {
            height: 160px;
            object-fit: cover;
        }

        .fabric-card h2 {
            font-size: 0.9rem;
        }

        .fabric-card p {
            font-size: 0.8rem;
        }

        /* Truncate text to 2 lines */
        .truncate-2-lines {
            display: -webkit-box;
            -webkit-line-clamp: 2;
            -webkit-box-orient: vertical;
            overflow: hidden;
            text-overflow: ellipsis;
            max-height: 2.6em;
        }
    </style>
</head>
<body class="bg-gray-100">
    <div class="container mx-auto p-4 pb-20"> <!-- Add padding bottom to avoid overlap with sticky button -->
        <h1 class="text-xl font-semibold mb-4">Select Fabrics for Your Design</h1>

        <form id="fabric-selection-form">
            <div id="fabrics-container" class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-6">
                <!-- Fabrics will be injected here dynamically -->
            </div>
        </form>
    </div>

    <!-- Static Add to Cart button -->
    <div class="sticky-cart">
        <button type="submit" form="fabric-selection-form" class="cart-button">
            Add to Cart
        </button>
    </div>

    <!-- JS Script -->
    <script>
      const urlParams = new URLSearchParams(window.location.search);
      const designId = urlParams.get('designId'); // Get designId from query params

      // Fetch the fabrics related to the selected design
      fetch(`/fabrics/related-to-design?designId=${designId}`)
      .then(response => response.json())
      .then(fabrics => {
        const fabricsContainer = document.getElementById('fabrics-container');

        // Clear any previous fabrics
        fabricsContainer.innerHTML = '';

        // Loop through the fabrics and display them
        fabrics.forEach(fabric => {
          const fabricElement = document.createElement('div');
          fabricElement.classList.add('fabric-card', 'bg-white', 'rounded-lg', 'shadow', 'flex', 'flex-col', 'justify-between', 'mx-auto');

          // Set the fabric HTML structure dynamically
          fabricElement.innerHTML = `
            <img class="mb-4 rounded-t-lg" src="/uploads/${fabric.imagePath}" alt="${fabric.clothName}" />
            <h2 class="text-base font-semibold truncate-2-lines mb-1">${fabric.clothName}</h2>
            <p class="text-gray-700 truncate-2-lines mb-1">${fabric.description}</p>
            <p class="text-green-700 font-semibold">Rs. ${fabric.price}/m</p>

            <label for="quantity-${fabric.id}" class="block text-sm font-medium text-gray-600 mt-2">Quantity (meters):</label>
            <input type="number" id="quantity-${fabric.id}" name="quantity" value="1" min="1" class="quantity-input mt-1 block w-full p-2 border rounded-md text-sm" data-price="${fabric.price}">
            
            <p class="fabric-total-price text-gray-900 font-semibold mt-2">Total: Rs. ${fabric.price}</p>

            <button class="select-fabric-button mt-3 bg-blue-500 hover:bg-blue-600 text-white text-sm font-medium py-2 px-4 rounded" data-selected="false" data-fabric-id="${fabric.id}">
              Select Fabric
            </button>
          `;

          // Append the fabric card to the container
          fabricsContainer.appendChild(fabricElement);
        });

        // Add event listeners to the select fabric buttons
        document.querySelectorAll('.select-fabric-button').forEach(button => {
          button.addEventListener('click', (event) => {
            const button = event.target;
            const isSelected = button.getAttribute('data-selected') === 'true';

            if (isSelected) {
              button.textContent = 'Select Fabric';
              button.classList.replace('bg-green-500', 'bg-blue-500');
              button.classList.replace('hover:bg-green-600', 'hover:bg-blue-600');
              button.setAttribute('data-selected', 'false');
            } else {
              button.textContent = 'Selected';
              button.classList.replace('bg-blue-500', 'bg-green-500');
              button.classList.replace('hover:bg-blue-600', 'hover:bg-green-600');
              button.setAttribute('data-selected', 'true');
            }
          });
        });

        // Update total price dynamically based on selected quantity
        document.querySelectorAll('.quantity-input').forEach(input => {
          input.addEventListener('input', (event) => {
            const pricePerMeter = parseFloat(event.target.dataset.price);
            const quantity = parseFloat(event.target.value);
            const totalPriceElement = event.target.closest('div').querySelector('.fabric-total-price');
            totalPriceElement.innerText = `Total: Rs. ${pricePerMeter * quantity}`;
          });
        });
      })
      .catch(error => console.error('Error loading fabrics:', error));

      // Add selected fabrics to the cart
      document.getElementById('fabric-selection-form').addEventListener('submit', (event) => {
        event.preventDefault(); // Prevent form submission

        const selectedFabrics = [];
        document.querySelectorAll('.select-fabric-button[data-selected="true"]').forEach(button => {
          const fabricId = button.getAttribute('data-fabric-id');
          const quantityInput = document.querySelector(`#quantity-${fabricId}`);
          selectedFabrics.push({
            fabricId: fabricId,
            quantity: quantityInput.value // Get quantity in meters
          });
        });

        // Send the selected fabrics to the server to add to the cart
        fetch('/cart/add', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ designId, selectedFabrics })
        })
        .then(response => response.json())
        .then(data => {
          // Handle success (e.g., redirect to cart or show a success message)
          alert('Fabrics added to cart successfully!');
          window.location.href = '/cart';
        })
        .catch(error => console.error('Error adding fabrics to cart:', error));
      });
    </script>
</body>
</html>
